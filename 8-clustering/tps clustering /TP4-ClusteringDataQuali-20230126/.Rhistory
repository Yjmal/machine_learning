library(knitr)
## Global options
options(max.print="75")
opts_chunk$set(echo=TRUE,
cache=FALSE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE,
class.source="badCode")
opts_knit$set(width=75)
library(knitr)
## Global options
options(max.print="75")
opts_chunk$set(echo=TRUE,
cache=FALSE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE,
class.source="badCode")
opts_knit$set(width=75)
library(knitr)
## Global options
options(max.print="75")
opts_chunk$set(echo=TRUE,
cache=FALSE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE,
class.source="badCode")
opts_knit$set(width=75)
library(reticulate)
library(ggplot2)
library(gridExtra)
library(plotly)
library(plotly)
library(FactoMineR)
install.packages('plotly')
library(plotly)
library(plotly)
library('libcurl')
library(plotly)
install.packages('plotly')
library(plotly)
library(FactoMineR)
library(factoextra)
library(dplyr)
library(klaR)
install.packages('klaR')
library(klaR)
library(reshape2)
library(mclust)
library(Rmixmod)
install.packages('Rmixmod')
library(Rmixmod)
library(cluster)
reticulate::repl_python()
\scriptsize
Data <-read.table("mushroomTP.csv")
Classep <- Data[:,1]
Classep <- Data[,1]
Classep
Data <- Data[,-1]   # jeu de données sans la variable Class
Data# jeu de données sans la variable Class
Classep
# jeu de données sans la variable Class
Data <- Data[,-1]
Data <-read.table("mushroomTP.csv")
Classep <- Data[,1]
Classep
Data <- Data[,-1]
Data
Data <-read.table("mushroomTP.csv",sep = ',')
Classep <- Data[,1]
Classep
Data <- Data[,-1]
Data
for (j in 1:ncol(Data)){
if (j<10){
Data[,j]<-as.factor(paste("0",j,"-",Data[,j],sep=""))}
else{Data[,j]<-as.factor(paste(j,"-",Data[,j],sep=""))}
}
Data
reticulate::repl_python()
library(FactoMineR)
library(factoextra)
resacm<-MCA(Data)
fviz_screeplot(resacm, choice = "eigenvalue")
fviz_mca(resacm)
reticulate::repl_python()
heatm<-function(clust,Data,J){
library(dplyr)
Dataaux<-data.frame(id.s=c(1:nrow(Data)),Data)
aux <- cbind(Dataaux, clust)
aux.long <- melt(data.frame(lapply(aux,as.character)),stringsAsFactors=FALSE, id = c("id.s", "clust"), factorsAsStrings=T)
# Effectifs
aux.long.q <- aux.long %>%
group_by(clust, variable, value) %>%
mutate(count = n_distinct(id.s)) %>%
distinct(clust, variable, value, count)
# avec fréquences
aux.long.p <- aux.long.q %>%
group_by(clust, variable) %>%
mutate(perc = count / sum(count)) %>%
arrange(clust)
Lev<-NULL
for (j in 1:ncol(Data))
Lev<-c(Lev,levels(Data[,j]))
Jaux<-NULL
for (j in 1:length(J)){
Jaux<-c(Jaux,which(aux.long.p$variable==colnames(Data)[J[j]]))
}
gaux<-ggplot(aux.long.p[Jaux,], aes(x = clust, y =value))+
geom_tile(aes(fill = perc))+
scale_fill_gradient2(low="white",mid = "blue", high = "red")+
theme_minimal()
return(list(gaux=gaux,eff=aux.long.q,freq=aux.long.p))
}
Mode <- function(x){
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
barplotClus<-function(clust,Data,J){
aux.long.p<-heatm(clust,Data,J)$freq
#ux<-unique(aux.long.p$variable)
for(j in J){
p <- ggplot(aux.long.p[which(aux.long.p$variable==colnames(Data)[j]),],aes(x=clust,y=perc,fill=value))+
geom_bar(stat="identity")
print(p)
}
}
reskmodes<-kmodes(resacm,4)
reskmodes<-kmodes(Data,4)
table((reskmodes,reskmodes$cluster))
table(reskmodes,reskmodes$cluster)
reskmodes<-kmodes(Data,4)
table(reskmodes,reskmodes$cluster)
table(reskmodes$cluster)
table(classerp,reskmodes$cluster)
table(,reskmodes$cluster)
table(reskmodes$cluster)
WithinDiff<-c(WithinDiff,sum(aux$WithinDiff))
for (k in 1:Kmax){
aux<-kmodes(Data, k = k)
WithinDiff<-c(WithinDiff,sum(aux$WithinDiff))
Clust[,k]<-aux$cluster
}
# A COMPLETER
WithinDiff<-NULL
Kmax<-10
Clust<-matrix(0,nrow=nrow(Data),ncol=Kmax)
for (k in 1:Kmax){
aux<-kmodes(Data, k = k)
WithinDiff<-c(WithinDiff,sum(aux$WithinDiff))
Clust[,k]<-aux$cluster
}
aux<-kmodes(Data,  k)
# A COMPLETER
WithinDiff<-NULL
Kmax<-10
Clust<-matrix(0,nrow=nrow(Data),ncol=Kmax)
for (k in 1:Kmax){
aux<-kmodes(Data,  k)
WithinDiff<-c(WithinDiff,sum(aux$WithinDiff))
Clust[,k]<-aux$cluster
}
auxdf<-data.frame(NbCluster=1:Kmax,WithinDiff=WithinDiff)
ggplot(auxdf,aes(x=NbCluster,y=WithinDiff))+geom_point()+
geom_line()
# A COMPLETER
WithinDiff<-NULL
Kmax<-10
Clust<-matrix(0,nrow=nrow(Data),ncol=Kmax)
for (k in 1:Kmax){
aux<-kmodes(Data,  k,iter.max = 100,weighted = FALSE)
WithinDiff<-c(WithinDiff,sum(aux$WithinDiff))
Clust[,k]<-aux$cluster
}
for (k in 1:Kmax){
aux<-kmodes(Data,  k,iter.max = 100,weighted = FALSE)
WithinDiff<-c(WithinDiff,sum(aux$WithinDiff))
Clust[,k]<-aux$cluster
}
auxdf<-data.frame(NbCluster=1:Kmax,WithinDiff=WithinDiff)
ggplot(auxdf,aes(x=NbCluster,y=WithinDiff))+geom_point()+
geom_line()
# A COMPLETER
WithinDiff<-NULL
Kmax<-10
Clust<-matrix(0,nrow=nrow(Data),ncol=Kmax)
for (k in 1:Kmax){
aux<-kmodes(Data,  k,iter.max = 100,weighted = FALSE)
WithinDiff<-c(WithinDiff,sum(aux$WithinDiff))
Clust[,k]<-aux$cluster
}
auxdf<-data.frame(NbCluster=1:Kmax,WithinDiff=WithinDiff)
ggplot(auxdf,aes(x=NbCluster,y=WithinDiff))+geom_point()+
geom_line()
Data <-read.table("mushroomTP.csv",sep = ',')
Classep <- Data[,1]
Classep
Data <- Data[,-1]
Data
# jeu de données sans la variable Class
for (j in 1:ncol(Data)){
if (j<10){
Data[,j]<-as.factor(paste("0",j,"-",Data[,j],sep=""))}
else{Data[,j]<-as.factor(paste(j,"-",Data[,j],sep=""))}
}
Data
reticulate::repl_python()
library(FactoMineR)
library(factoextra)
resacm<-MCA(Data)
fviz_screeplot(resacm, choice = "eigenvalue")
fviz_mca(resacm)
# J indice des noms de variables
heatm<-function(clust,Data,J){
library(dplyr)
Dataaux<-data.frame(id.s=c(1:nrow(Data)),Data)
aux <- cbind(Dataaux, clust)
aux.long <- melt(data.frame(lapply(aux,as.character)),stringsAsFactors=FALSE, id = c("id.s", "clust"), factorsAsStrings=T)
# Effectifs
aux.long.q <- aux.long %>%
group_by(clust, variable, value) %>%
mutate(count = n_distinct(id.s)) %>%
distinct(clust, variable, value, count)
# avec fréquences
aux.long.p <- aux.long.q %>%
group_by(clust, variable) %>%
mutate(perc = count / sum(count)) %>%
arrange(clust)
Lev<-NULL
for (j in 1:ncol(Data))
Lev<-c(Lev,levels(Data[,j]))
Jaux<-NULL
for (j in 1:length(J)){
Jaux<-c(Jaux,which(aux.long.p$variable==colnames(Data)[J[j]]))
}
gaux<-ggplot(aux.long.p[Jaux,], aes(x = clust, y =value))+
geom_tile(aes(fill = perc))+
scale_fill_gradient2(low="white",mid = "blue", high = "red")+
theme_minimal()
return(list(gaux=gaux,eff=aux.long.q,freq=aux.long.p))
}
Mode <- function(x){
ux <- unique(x)
ux[which.max(tabulate(match(x, ux)))]
}
barplotClus<-function(clust,Data,J){
aux.long.p<-heatm(clust,Data,J)$freq
#ux<-unique(aux.long.p$variable)
for(j in J){
p <- ggplot(aux.long.p[which(aux.long.p$variable==colnames(Data)[j]),],aes(x=clust,y=perc,fill=value))+
geom_bar(stat="identity")
print(p)
}
}
library(klaR)
reskmodes<-kmodes(Data,4)
table(reskmodes$cluster)
# A COMPLETER
WithinDiff<-NULL
Kmax<-10
Clust<-matrix(0,nrow=nrow(Data),ncol=Kmax)
for (k in 1:Kmax){
aux<-kmodes(Data,  k,iter.max = 100,weighted = FALSE)
WithinDiff<-c(WithinDiff,sum(aux$WithinDiff))
Clust[,k]<-aux$cluster
}
auxdf<-data.frame(NbCluster=1:Kmax,WithinDiff=WithinDiff)
ggplot(auxdf,aes(x=NbCluster,y=WithinDiff))+geom_point()+
geom_line()
WithinDiff<-c(WithinDiff,sum(aux$withinDiff))
# A COMPLETER
WithinDiff<-NULL
Kmax<-10
Clust<-matrix(0,nrow=nrow(Data),ncol=Kmax)
for (k in 1:Kmax){
aux<-kmodes(Data,  k,iter.max = 100,weighted = FALSE)
WithinDiff<-c(WithinDiff,sum(aux$withinDiff))
Clust[,k]<-aux$cluster
}
auxdf<-data.frame(NbCluster=1:Kmax,WithinDiff=WithinDiff)
ggplot(auxdf,aes(x=NbCluster,y=WithinDiff))+geom_point()+
geom_line()
# A COMPLETER
WithinDiff<-NULL
Kmax<-10
Clust<-matrix(0,nrow=nrow(Data),ncol=Kmax)
for (k in 1:Kmax){
aux<-kmodes(Data,  k,iter.max = 100,weighted = FALSE)
WithinDiff<-c(WithinDiff,sum(aux$withindiff))
Clust[,k]<-aux$cluster
}
auxdf<-data.frame(NbCluster=1:Kmax,WithinDiff=WithinDiff)
ggplot(auxdf,aes(x=NbCluster,y=WithinDiff))+geom_point()+
geom_line()
reticulate::repl_python()
