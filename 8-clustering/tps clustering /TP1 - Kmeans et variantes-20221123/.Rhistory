import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import plotly.express as px
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA
from sklearn.cluster import KMeans
from sklearn.metrics.cluster import adjusted_rand_score
from sklearn_extra.cluster import KMedoids
from sklearn.neighbors import NearestNeighbors
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA
from sklearn.cluster import KMeans
from sklearn.metrics.cluster import adjusted_rand_score
from sklearn.metrics import silhouette_samples, silhouette_score
from sklearn_extra.cluster import KMedoids
from sklearn.neighbors import NearestNeighbors
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA
from sklearn.cluster import KMeans
from sklearn.metrics.cluster import adjusted_rand_score
from sklearn.metrics import silhouette_samples, silhouette_score
from sklearn_extra.cluster import KMedoids
from sklearn.neighbors import NearestNeighbors
winepy=r.wine
import matplotlib
import plotly.express as px
winepy=r.wine
import matplotlib
import plotly.express as px
import matplotlib.pyplot as plt
fig = px.box(winepy.select_dtypes(include=["float"]))
fig.show()
fig1 = px.violin(winepy.select_dtypes(include=["float"]))
fig1.show()
fig2 = px.bar(winepy.select_dtypes(include=["float"]))
fig2.show()
winequant=winepy
winequant=winequant.drop(columns=['Type','Qualite'])
winequant_corr= winequant.corr()
fig3= sns.heatmap(winequant_corr)
fig3.show()
from sklearn.preprocessing import StandardScaler
scaler = StandardScaler();
scaler.fit(winequant);
winequant=scaler.transform(winequant)
winequant.head()
winequant=winepy
winequant=winequant.drop(columns=['Type','Qualite'])
winequant_corr= winequant.corr()
fig3= sns.heatmap(winequant_corr)
sns.heatmap(winequant_corr)
sns.heatmap(winequant.corr())
fig3.show()
winequant_corr= winequant.corr()
winequant_corr
sns.heatmap(winequant.corr())
fig3.show()
sns.heatmap(winequant)
fig3.show()
fig3 = sns.heatmap(winequant)
fig3.show()
import numpy as np
fig.close()
from sklearn.decomposition import PCA
mypca = PCA()
mypca.fit(winequant)
print(mypca.explained_variance_ratio_.cumsum())
```{python}
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import plotly.express as px
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA
from sklearn.cluster import KMeans
from sklearn.metrics.cluster import adjusted_rand_score
from sklearn.metrics import silhouette_samples, silhouette_score
from sklearn_extra.cluster import KMedoids
from sklearn.neighbors import NearestNeighbors
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA
from sklearn.cluster import KMeans
from sklearn.metrics.cluster import adjusted_rand_score
from sklearn.metrics import silhouette_samples, silhouette_score
from sklearn_extra.cluster import KMedoids
from sklearn.neighbors import NearestNeighbors
winepy=r.wine
import matplotlib
import plotly.express as px
import matplotlib.pyplot as plt
fig = px.box(winepy.select_dtypes(include=["float"]))
fig.show()
fig1 = px.violin(winepy.select_dtypes(include=["float"]))
fig1.show()
fig2 = px.bar(winepy.select_dtypes(include=["float"]))
fig2.show()
winequant=winepy
winequant=winequant.drop(columns=['Type','Qualite'])
winequant_corr= winequant.corr()
winequant_corr
fig3 = sns.heatmap(winequant)
fig3.show()
fig3 = sns.heatmap(winequant.corr())
fig3.show()
from sklearn.preprocessing import StandardScaler
scaler = StandardScaler();
scaler.fit(winequant);
winequant=scaler.transform(winequant)
winequant.head()
winequant=scaler.transform(winequant)
winequant.head()
from sklearn.decomposition import PCA
mypca = PCA()
mypca.fit(winequant)
print(mypca.explained_variance_ratio_.cumsum())
dataPCA=mypca.fit_transform(winequant)
pca_df = pd.DataFrame({
"Dim1" : dataPCA[:,0],
"Dim2" : dataPCA[:,1],
"Type" : winepy["Type"],
"Qualite" : winepy["Qualite"]
})
fig=px.scatter(pca_df,x="Dim1", y="Dim2", color="Type")
fig.show()
fig4.show()
fig4=px.scatter(pca_df,x="Dim1", y="Dim2", color="Type")
fig4.show()
fig4=px.scatter(pca_df,x="Dim1", y="Dim2", color="Type")
fig4.show()
fig4.show()
from sklearn.cluster import KMeans
kmeans = KMeans(3)
kmeans.fit(winequant)
pca_df = pd.DataFrame({
"Dim1" : dataPCA[:,0],
"Dim2" : dataPCA[:,1],
"Type" : winepy["Type"],
"Qualite" : winepy["Qualite"],
"Kmeans3" : pd.Categorical(kmeans.labels_)     # A completer
})
fig = px.scatter(pca_df,x="Dim1", y="Dim2", color="Kmeans3", symbol="Kmeans3")
fig.show()
fig6 = px.scatter(pca_df,x="Dim1", y="Dim2", color="Kmeans3", symbol="Kmeans3")
fig6.show()
pd.crosstab(..,"freq")   # A completer
library(knitr)
## Global options
options(max.print="75")
opts_chunk$set(echo=TRUE,
cache=FALSE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE,
class.source="badCode")
opts_knit$set(width=75)
```{r setup, echo=FALSE, cache=TRUE}
library(knitr)
## Global options
options(max.print="75")
opts_chunk$set(echo=TRUE,
cache=FALSE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE,
class.source="badCode")
opts_knit$set(width=75)
library(knitr)
## Global options
options(max.print="75")
opts_chunk$set(echo=TRUE,
cache=FALSE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE,
class.source="badCode")
opts_knit$set(width=75)
L'objectif de ce TP est d'illustrer les notions abord√©es dans le
```{r,echo=T, error=F,warning=F}
## Pour faire le TP
library(mclust)
library(cluster)
library(factoextra)
library(FactoMineR)
library(ppclust)
library(reticulate)
library(reticulate)
library(ggplot2)
library(reshape)
library(corrplot)
library(gridExtra)
library(circlize)
library(viridis)
library(reshape2)
## Pour faire le TP
library(mclust)
library(cluster)
library(factoextra)
library(FactoMineR)
library(ppclust)
library(reticulate)
library(ggplot2)
library(reshape)
library(corrplot)
library(gridExtra)
library(circlize)
library(viridis)
library(reshape2)
reticulate::repl_python()
wine <-read.table('wine.txt')
head(wine)
str(wine)
wine$Qualite = as.factor(wine$Qualite)
wine$Type = factor(wine$Type, labels = c("blanc", "rouge"))
head(wine)
# A completer
##variables qualitatives
levels(wine$Type)
summary(wine$Type)
EffType = as.vector(table(wine$Type))
EffType
##variables quantitatives
corrplot(cor(wine[, -c(1:2)]), method = "ellipse")
boxplot(wine[, -c(1:2)])
acp <- PCA(wine[, -c(1:2)], scale.unit = TRUE, , graph = F)
options(repr.plot.width = 4, repr.plot.height = 3)
barplot(acp$eig[,1])
boxplot(acp$ind$coord)
acp$svd$V
dimdesc(acp,axes = c(1,2))
options(repr.plot.width = 5, repr.plot.height = 5)
plot(acp)
plot(acp, choix = "var")
plot(acp, choix = "var")
reticulate::repl_python()
